/*
 * Tuple.h
 *
 *  Created on: Feb 12, 2018
 *      Author: joseph
 */

#ifndef TUPLE_H_
#define TUPLE_H_


//class... tuple --> means some unknown number of types


//This is a tuple array with no classes
template<class derived, class list...>
class Tuple_Array {
	//empty//
};

template<class derived, class front, class list...>
class Tuple_Array<derived, front, list...> {
	using P = derived;													// p = the previous clsas
	using N = Tuple_Array<Tuple_Array<derived, list...>, list...>;		// n = the next class


	front data;

	const auto& next() { return static_cast<const N&>(*this); }
		  auto& next() { return static_cast<	  N&>(*this); }

	const auto& prev() { return static_cast<const P&>(*this); }
		  auto& prev() { return static_cast<	  P&>(*this); }

	template<int N> const auto& get(std::true_type) const { return data; }
	template<int N> 	  auto& get(std::true_type) 	  { return data; }

	template<int N> const auto& get(std::false_type) const { return next().get<N - 1>(N - 1 == 0); }
	template<int N> 	  auto& get(std::false_type) 	   { return next().get<N - 1>(N - 1 == 0); }

};


template<class... list>
class Tuple {};
