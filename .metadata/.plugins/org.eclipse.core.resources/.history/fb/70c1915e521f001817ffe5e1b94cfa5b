/*
 * Tensor_Initializer.h
 *
 *  Created on: Mar 3, 2018
 *      Author: joseph
 */

#ifndef TENSOR_INITIALIZER_H_
#define TENSOR_INITIALIZER_H_

#include "Determiners.h"
#include "Tensor_Core.cu"

namespace BC {


template<class derived>
class TensorInitializer<derived, std::enable_if_t<!MTF::isCorePure<derived>::conditional>> {

	using self 			= TensorInitializer<derived>;

	using functor_type 	= _functor<derived>;
	using Mathlib 		= _mathlib<derived>;
	using scal			= _scalar<derived>;

public:

	functor_type black_cat_array;

	TensorInitializer(		 derived&& tensor) : black_cat_array(tensor.black_cat_array){}
	TensorInitializer(const  derived&  tensor) : black_cat_array(tensor.black_cat_array){}
	template<class... params>
	TensorInitializer(const  params&... p) : black_cat_array(p...) {}
};
}



#endif /* TENSOR_INITIALIZER_H_ */
