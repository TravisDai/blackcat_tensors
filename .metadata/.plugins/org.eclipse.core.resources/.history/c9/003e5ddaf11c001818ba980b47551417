/*
 * BC_Correlation.h
 *
 *  Created on: Feb 25, 2018
 *      Author: joseph
 */

#ifndef BC_CORRELATION_H_
#define BC_CORRELATION_H_

#include "../BlackCat_Tensors.h"
#include <vector>

namespace BC {
template<int> struct cor;

struct corr_mul {
	template<class T, class U>
	__BC_gcpu__ inline __attribute__((always_inline))  T operator () (T t, U u) const {
		return t * u;
	}
};
struct axpy {
	template<class T, class U>
	__BC_gcpu__ inline __attribute__((always_inline))  T operator () (T& t, U u) const {
		return t += u;
	}
};



using _shape = std::vector<int>;

template<int movements = 2, class d1, class d2>
auto x_corr(const TensorBase<d1>& krnl, const TensorBase<d2>& img) {
	using output_tensor = typename base<movements>::type<_scalar<d1>, _mathlib<d1>>;
	//initialize dimensionality of the tensor
	_shape dimensions(movements);
	for (int i = 0; i < movements; ++i)
		dimensions[i] = img.dimension(i) - krnl.dimension(i) + 1;

	//initialize the output tensor
	output_tensor tensor(dimensions);
	cor<movements>::x_corr(tensor, krnl, img);
	return tensor;

}


template<>
struct cor<0> {
template<class d0, class d1, class d2>
static auto x_corr(const TensorBase<d0>& out, const TensorBase<d1>& krnl, const TensorBase<d2>& img, int size) {

		auto expr = krnl.binExpr(corr_mul(), img);
		for (int i = 0; i < size; ++i) {
			expr[i];//iterate through the krnl to enforce evaluation
		}
}

static constexpr int max0(int a) { return a > 0 ? a : 0; }

	template<class V, class T, class U>
	static void x_correlation(V& cor, const T& krnl, const U& img)
	{
		const int n_krnl_rows = 1;
		const int krnl_row_length = 0;
		for (int i = 0; i < img_size - krnl_rows; ++i) {
			for (int j = 0; j < n_krnl_rows; ++j) {
				for (int k = 0; k < krnl_row_length; ++k) {
					if ((int)(i / img_rows) != (int)((i + k) / img_rows))
						cor[i + j * cor_rows + 1] += krnl[k + j  * krnl_row_length] * img[i + k];
					else
						cor[i + j * cor_rows] += krnl[k + j  * krnl_row_length] * img[i + k];

				}
			}
		}
	}

};

}

#endif /* BC_CORRELATION_H_ */
