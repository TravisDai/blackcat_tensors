/*
 * FeedForward.cu
 *
 *  Created on: Jan 28, 2018
 *      Author: joseph
 */

#ifndef OUTPUT_CU
#define OUTPUT_CU

#include "Defaults.h"
namespace BC {

template<class Parent>
struct InputLayer : Parent {

public:

	InputLayer(int inputs) : INPUTS(inputs), hypothesis(inputs) {
	}

	template<class T> vec forwardPropagation(const vec_expr<T>& x) {
		return this->next().forwardPropagation(x);
	}
	template<class T> vec forwardPropagation_Express(const vec_expr<T>& x) const {
		return this->next().forwardPropagation_Express(x);
	}

	template<class T> vec backPropagation(const vec_expr<T>& dy) {
		return dy;
	}

	void updateWeights() {
		//empty
	}
	void clearBPStorage() {
		//empty
	}

	int getClass() {
		return LAYER_TYPE::Input_;
	}
	void write(std::ofstream& is) {
		is << INPUTS << ' ';
		hypothesis.write(is);

	}
	void read(std::ifstream& os) {
		os >> INPUTS;
		hypothesis.read(os);
	}

};
}

#include "BlackCat_Tuple.cu"



#endif /* FEEDFORWARD_CU_ */
