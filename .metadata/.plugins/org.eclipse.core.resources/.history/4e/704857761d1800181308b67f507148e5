/*
 * Generator.h
 *
 *  Created on: Feb 22, 2018
 *      Author: joseph
 */

#ifndef GENERATOR_H_
#define GENERATOR_H_

#include "BlackCat_Tuple.cu"
#include "Defaults.h"

namespace BC {

template< class head, class... integers>
void initializerTail(head net, integers... params) {
	Net.data_ = new typename decltype(net.data_)::type(params...);

}

template< class head, class... integers>
void initializer(head net, int x, int y, integers... params) {
	Net.data_ = new typename  decltype(net.data_)::type(x, y);

	if (sizeof...(params) > 1)
	initializer(net.next(), y, params...);
	else
		initializerTail(Next.next(), params...);
}
template< class head, class... integers>
void initializerHead(head net, int x, integers... params) {

	net.data_ = new  typename  decltype(net.data_)::type(x);
	initializer(net.next(), x, params...);
}


template<template<class> class... layers, class... integers>
auto generateNetwork(integers... structure) {
	auto net = LayerChain<BASE, InputLayer, layers..., OutputLayer>();
	initializerHead(net, structure...);

	return net;
}



}



#endif /* GENERATOR_H_ */
