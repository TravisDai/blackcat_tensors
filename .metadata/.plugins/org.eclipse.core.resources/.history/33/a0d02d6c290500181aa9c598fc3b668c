/*
 * Vector.h
 *
 *  Created on: Dec 30, 2017
 *      Author: joseph
 */

#ifndef VECTOR_H_
#define VECTOR_H_

#include "Scalar.h"
#include "TensorBase.h"


namespace BC {
template<class T, class Mathlib>
class Vector : public TensorBase<T, Vector<T, Mathlib>, Mathlib> {

	using parent_class = TensorBase<T, Vector<T, Mathlib>, Mathlib>;
	using _int = typename parent_class::subAccess_int;
	using __int = typename parent_class::force_evaluation_int;
	template<class,class> friend class Vector;


public:

	static constexpr int RANK() { return 1; }
	using parent_class::operator=;
	using parent_class::parent_class;

	Vector(const Vector& v) : parent_class(v.shape_copy_packet(),
			MTF::isPrimivite<T>::conditional ? nullptr, v.data()) {}
	Vector(Vector&& v) : parent_class(v) {}

	Vector() = default;
	Vector(int dim) : parent_class({dim}) {}

	Scalar<T, Mathlib> operator[] (_int i) {
		return (Scalar<T, Mathlib>(&this->array[i]));
	}
	const Scalar<T, Mathlib> operator[] (_int i) const {
		return Scalar<T, Mathlib>(&this->array[i]);
	}

	const Vector<T, Mathlib> operator () (int index, std::vector<int> sub_shape) const {
		return Vector<T, Mathlib>(this->subAccessor_packet(sub_shape), &this->data()[index]);
	}
	Vector<T, Mathlib> operator () (int index, std::vector<int> sub_shape) {
		return Vector<T, Mathlib>(this->subAccessor_packet(sub_shape), &this->data()[index]);
	}
	const Vector<unary_expression_transpose<typename MTF::determine_scalar<T>::type, Vector<T, Mathlib>>, Mathlib> t() const {
		return Vector<unary_expression_transpose<typename MTF::determine_scalar<T>::type, Vector<T, Mathlib>>, Mathlib>(this->transpose_packet(), *this);
	}
};

} //End Namespace BC

#endif /* VECTOR_H_ */
