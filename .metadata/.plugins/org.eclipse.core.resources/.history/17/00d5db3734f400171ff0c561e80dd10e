#include <iostream>
#include "BlackCat_Tensors.h"
#include "BC_Internals/BC_Core/Vector.h"
using BC::Vector;
using BC::Matrix;
int VectorPointwise() {

std::cout << "Vector test " <<std::endl;

	Vector<double>   a(5);
	Vector<double>   b(5);
	Vector<double,5> c;

	Vector<double, 0, BC::GPU> g(10);
	g.print();

	b.randomize(-3, 5);
	c.randomize(0, 5);

	a.print();
	b.print();
	c.print();

	std::cout << " b.size = " <<b.size() << std::endl;
	std::cout << " c.size = " <<c.size() << std::endl;

	a = b - c;

	a.print();

	a += a + b[0];
	a.print();



	std::cout << " out" << std::endl;
}

int MatrixPointwise() {

std::cout << "Matrix test " <<std::endl;

	Matrix<double> a(5, 5);
	Matrix<double> b(5, 5);
	Matrix<double, 5, 5> c;

	b.randomize(-3, 5);
	c.randomize(0, 5);

	a.print();
	b.print();
	c.print();
//
	std::cout << " b.size = " <<b.size() << std::endl;
	std::cout << " c.size = " <<c.size() << std::endl;

	a = b - c;

	a.print();

//	a = a + b[0][0];
	a.print();

	a[0].print();
	a[2].print();

	std::cout << " out" << std::endl;
}

int gpu() {

std::cout << "Vector test " <<std::endl;


	Vector<double, 0, BC::GPU> a(10);
	Vector<double, 0, BC::GPU> b(10);
	Vector<double, 0, BC::GPU> c(10);

	b.randomize(0, 10);
	c.randomize(0, 10);

	b.print();
	c.print();

	a = b + c;

	a.print();



	std::cout << " out" << std::endl;
}


#include "test.cu"
int main() {

	test();
//gpu();
	//VectorPointwise();
//	MatrixPointwise();
}

