/*
 * TensorBase.h
 *
 *  Created on: Feb 15, 2018
 *      Author: joseph
 */

#ifndef TENSORBASE_H_
#define TENSORBASE_H_

#include "Expression.h"
#include "Expression_Binary_Functors.cu"
#include "Simple.h"
namespace BC {


template<int order>
struct Shape {

};
template<>
struct Shape<0> {

};
template<>
struct Shape<1> {
	int m;
};
//int m;
//int n;
//int sz;
//
//scalar* array;
template<class derived, class scalar>
struct TensorBase {

	operator const derived&() { return static_cast<const derived&>(*this); }
	operator 	   derived&() { return static_cast<		 derived&>(*this); }

	template<class d, class s> auto operator +(const TensorBase<d,s>& tens) const {
		bp_expr<add, derived&, TensorBase<d, s>::derived>(*this, tens);
	}
	template<class d, class s> auto operator -(const TensorBase<d,s>& tens) const {
		bp_expr<sub, derived&, TensorBase<d, s>::derived>(*this, tens);
	}
	template<class d, class s> auto operator /(const TensorBase<d,s>& tens) const {
		bp_expr<div, derived&, TensorBase<d, s>::derived>(*this, tens);
	}
	template<class d, class s> auto operator &(const TensorBase<d,s>& tens) const {
		bp_expr<div, derived&, TensorBase<d, s>::derived>(*this, tens);
	}
};

template<bool var, class A, class B>
using elif = std::conditional<var, A, B>::type;

template<class derived, class scalar, int order, bool ownership, class ml>
struct TensorCore {

	struct DISABLE;

	struct functor_ {
		elif<ownership, int[order], int*> is;
		elif<ownership, int[order], int*> os;
		scalar* array;

	};

	using functor = elif<MTF::isPrimitive<scalar>::conditional, functor_, scalar>;
	functor function_param;



};

#endif /* TENSORBASE_H_ */
