/*
 * Dynamic_Shape.h
 *
 *  Created on: Jan 5, 2018
 *      Author: joseph
 */

#ifndef DYNAMIC_SHAPE_H_
#define DYNAMIC_SHAPE_H_

namespace BC {
template<int... dimensions>
struct Dynamic_Outer_Shape {

	using params = _list<int*, std::initializer_list<int>>;
	static constexpr int LD_RANK    = sizeof...(dimensions);
	static constexpr bool isDynamic = MTF::sum<dimensions...>::value == 0;
//
//	void printLeadingDimensions() const { BC_Shape_Identity_impl::print<Outer_Shape<dimensions...>>(); }
//
//	const auto getOuterShape() const {
//		std::vector<int> sh(LD_RANK);
//		template_to_array::f<Outer_Shape<dimensions...>>::fill(&sh[0]);
//		  return sh;
//	}
//
//	constexpr int LD_size()  const { return BC_Shape_Identity_impl::size<dimensions...>();  }
//	constexpr int LD_rows()  const { return BC_Shape_Identity_impl::row<dimensions...>();   }
//	constexpr int LD_cols()  const { return BC_Shape_Identity_impl::col<dimensions...>();   }
//	constexpr int LD_depth() const { return BC_Shape_Identity_impl::depth<dimensions...>(); }
//	constexpr int LD_pages() const { return BC_Shape_Identity_impl::pages<dimensions...>(); }
//	constexpr int LD_books() const { return BC_Shape_Identity_impl::books<dimensions...>(); }
//	constexpr int LD_libraries() const { return BC_Shape_Identity_impl::libraries<dimensions...>(); }
//
//	template<int dim_index> constexpr int LD_dimension() const { return BC_Shape_Identity_impl::dimension<dim_index, dimensions...>(); }
};

//
//template<int ... dimensions>
//struct Dynamic_Inner_Shape {
//
//	using params = _list<>;
//	static constexpr int RANK = sizeof...(dimensions);
//	static constexpr bool isDynamic = MTF::sum<dimensions...>::value == 0;
//
//	void printDimensions() const { BC_Shape_Identity_impl::print<Inner_Shape<dimensions...>>(); }
//	int passInner() { return 0; }
//
//	const auto getShape() const {
//		std::vector<int> sh(RANK);
//		template_to_array::f<Inner_Shape<dimensions...>>::fill(&sh[0]);
//		  return sh;
//	}
//	constexpr int order() const { return sizeof...(dimensions); }
//	constexpr int size()  const { return BC_Shape_Identity_impl::size<dimensions...>();  }
//	constexpr int rows()  const { return BC_Shape_Identity_impl::row<dimensions...>();   }
//	constexpr int cols()  const { return BC_Shape_Identity_impl::col<dimensions...>();   }
//	constexpr int depth() const { return BC_Shape_Identity_impl::depth<dimensions...>(); }
//	constexpr int pages() const { return BC_Shape_Identity_impl::pages<dimensions...>(); }
//	constexpr int books() const { return BC_Shape_Identity_impl::books<dimensions...>(); }
//	constexpr int libraries() const { return BC_Shape_Identity_impl::libraries<dimensions...>(); }
//
//	template<int dim_index> constexpr int dimension() const { return BC_Shape_Identity_impl::dimension<dim_index, dimensions...>(); }
//};


}



#endif /* DYNAMIC_SHAPE_H_ */
