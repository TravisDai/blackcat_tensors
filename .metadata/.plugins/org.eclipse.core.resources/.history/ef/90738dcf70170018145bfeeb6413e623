/*
 * Expression_Unary_Pointwise.cu
 *
 *  Created on: Jan 25, 2018
 *      Author: joseph
 */
#ifdef  __CUDACC__
#ifndef EXPRESSION_UNARY_POINTWISE_CU_
#define EXPRESSION_UNARY_POINTWISE_CU_

#include "Expression_Base.cu"
namespace BC {
template<class T, class operation, class value>
class unary_expression : public expression<T, unary_expression<T, operation, value>> {
public:

	operation oper;
	const value& data;

	int rank() const { return data.rank(); }
	int size() const { return data.size(); }
	int rows() const { return data.rows(); }
	int cols() const { return data.cols(); }
	int LD_rows() const { return data.LD_rows(); }
	int LD_cols() const { return data.LD_cols(); }

	int dimension(int i)		const { return data.dimension(i); }
	void printDimensions() 		const { data.printDimensions();   }
	void printLDDimensions()	const { data.printLDDimensions(); }

	const auto InnerShape() const 			{ return data.InnerShape(); }
	const auto OuterShape() const 			{ return data.OuterShape(); }

	inline __attribute__((always_inline)) __BC_gcpu__ unary_expression(const value& v) : data(v) {}

	inline __attribute__((always_inline)) __BC_gcpu__
	auto operator [](int index) const -> decltype(oper(data[index])) {
		return oper(data[index]);
	}
	inline __attribute__((always_inline)) __BC_gcpu__
	auto operator [](int index) -> decltype(oper(data[index])) {
		return oper(data[index]);
	}

};

}



#endif /* EXPRESSION_UNARY_POINTWISE_CU_ */
#endif
