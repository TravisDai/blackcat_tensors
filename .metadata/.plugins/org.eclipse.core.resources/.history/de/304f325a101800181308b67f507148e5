
#ifndef BLACKCAT_TUPLE
#define BLACKCAT_TUPLE

namespace BC {

	template<class derived, template<class> class...>
	struct LayerChain {

		using p = derived;
		auto& tail() const { return *this; }
		auto& prev() const { return static_cast<p&>(*this); }


	};

	template<class derived, template<class> class front, template<class> class... lst>
	struct LayerChain<derived, front, lst> : LayerChain<LayerChain<derived, front, lst>, lst...> {

		using p = derived;
		using n = typename LayerChain<LayerChain<derived, front, lst>, lst...>::type;
		using type = front<LayerChain<derived, front, lst>>;

		type data;

		const auto& tail() const { return next().tail(); }
		auto& prev()  { return static_cast<p&>(*this); }
		const auto& prev() const { return static_cast<p&>(*this); }	auto& prev()  { return static_cast<p&>(*this); }
		const auto& prev() const { return static_cast<p&>(*this); }


	};


}
#endif
