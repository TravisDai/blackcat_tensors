/*
 * BC_Correlation.h
 *
 *  Created on: Feb 25, 2018
 *      Author: joseph
 */

#ifndef BC_CORRELATION_H_
#define BC_CORRELATION_H_

#include "../BlackCat_Tensors.h"
#include <vector>

namespace BC {

namespace corr_helper {
template<> struct base<0> { template<class t, class m> using type = Scalar<t,m>;  template<class t, class m> using slice = DISABLED<t, m>; };
template<> struct base<1> { template<class t, class m> using type = Vector<t, m>; template<class t,class m> using slice = Scalar<t, m>; };
template<> struct base<2> { template<class t, class m> using type = Matrix<t, m>; template<class t,class m> using slice = Vector<t, m>; };
template<> struct base<3> { template<class t, class m> using type = Cube<t, m>;   template<class t,class m> using slice = Matrix<t, m>; };
}
using _shape = std::vector<int>;

template<int movements = 2, class T, class ml, class d1, class d2>
typename corr_helper::base<movements>::type<T, ml> x_corr(const TensorBase<d1>& krnl, const TensorBase<d2>& img, std::true_type = true) {

	using output_tensor = typename corr_helper::base<movements>::type<T, ml>;

	_shape dimensions(movements);
	for (int i = 0; i < movements; ++i)
		dimensions[i] = img.dimensions[i] - krnl.dimensions[i] + 1;

	output_tensor tensor(dimensions);


}
template<int movements = 2, class T, class ml, class d1, class d2>
typename corr_helper::base<movements>::type<T, ml> x_corr(const TensorBase<d1>& krnl, const TensorBase<d2>& img, std::false_type = false) {

	using output_tensor = typename corr_helper::base<movements>::type<T, ml>;
	output_tensor tensor;

}


namespace corr_helper {

}
}



#endif /* BC_CORRELATION_H_ */
