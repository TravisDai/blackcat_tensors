/*
 * Expression_Binary_Correlation.h
 *
 *  Created on: Feb 27, 2018
 *      Author: joseph
 */

#ifndef EXPRESSION_BINARY_CORRELATION_H_
#define EXPRESSION_BINARY_CORRELATION_H_

#include "Expression_Base.cu"
namespace BC {

template<class T, class operation, class lv, class rv>
struct binary_expression_correlation : public expression<T, binary_expression_correlation<T, operation, lv, rv>> {

	operation oper;

	const lv& krnl;
	const rv& img;

	template<class L, class R>
	inline __attribute__((always_inline)) binary_expression_correlation(const L& l, const R& r) :
			krnl(l), img(r) {
	}

	inline __attribute__((always_inline)) __BC_gcpu__ auto operator [](int index) const -> decltype(oper(left[index], right[index])) {
		return oper(left[index], right[index]);
	}

	int rank() const { return right.rank(); }
	int rows() const { return right.rows(); };
	int cols() const { return right.cols(); };
	int size() const { return right.size(); };
	int LD_rows() const { return right.LD_rows(); }
	int LD_cols() const { return right.LD_cols(); }
	int dimension(int i)		const { return right.dimension(i); }
	void printDimensions() 		const { right.printDimensions();   }
	void printLDDimensions()	const { right.printLDDimensions(); }
	auto accessor_packet(int index) const { return right.accessor_packet(index); }
	const auto InnerShape() const { return right.InnerShape(); }
	const auto OuterShape() const { return right.OuterShape(); }
	const auto addressOf(int offset) const { return binary_expression(addressOf(left, offset), addressOf(right, offset)); }

};


#endif /* EXPRESSION_BINARY_CORRELATION_H_ */
