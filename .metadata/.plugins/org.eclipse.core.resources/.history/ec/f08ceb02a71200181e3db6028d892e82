/*
 * TensorBase.h
 *
 *  Created on: Feb 15, 2018
 *      Author: joseph
 */

#ifndef TENSORBASE_H_
#define TENSORBASE_H_

#include "Expression.h"
#include "Expression_Binary_Functors.cu"
#include "Simple.h"
namespace BC {

template<int order>
struct Shape {

};
template<>
struct Shape<0> {

};
template<>
struct Shape<1> {
	int m;
};
//int m;
//int n;
//int sz;
//
//scalar* array;
template<class derived, class scalar>
struct TensorBase {

	operator const derived&() {
		return static_cast<const derived&>(*this);
	}
	operator derived&() {
		return static_cast<derived&>(*this);
	}

	template<class d, class s> auto operator +(const TensorBase<d, s>& tens) const {
		bp_expr<add, derived&, TensorBase<d, s>::derived>(*this, tens);
	}
	template<class d, class s> auto operator -(const TensorBase<d, s>& tens) const {
		bp_expr<sub, derived&, TensorBase<d, s>::derived>(*this, tens);
	}
	template<class d, class s> auto operator /(const TensorBase<d, s>& tens) const {
		bp_expr<div, derived&, TensorBase<d, s>::derived>(*this, tens);
	}
	template<class d, class s> auto operator &(const TensorBase<d, s>& tens) const {
		bp_expr<div, derived&, TensorBase<d, s>::derived>(*this, tens);
	}
};

template<bool var, class A, class B>
using elif = std::conditional<var, A, B>::type;


template<class > struct derived_shell;
template<template<class ...> class T, class... set> struct derived_shell<T<set...>>
{	template<class... p> using type = T<p...>;};


template<class T, bool ownership = true>
struct ScalarCore{
	T array;
	int size() { return 0; }
	auto operator [] (int index) const { return array[0]; }
	auto operator [] (int index) { return array[0]; }

};
template<class T, bool ownership = true>
struct VectorCore {
	T array;
	int m;
	int size() { return m; }

};
template<class T, bool ownership = true>
struct MatrixCore {
	T array;
	int m, n;
	int sz = m * n;
	int size() const { return m * n; }
};

template<class T, bool ownership = true>
struct TensorCore {
	T array;
	int m, n;
	int sz = m * n;
	int size() const { return m * n; }
};


template<class derived, class scalar, int order, class ml>
struct TensorBase {

	template<class sub> using derived_body = derived_shell<sub, ml>;
	template<class sub, class param> using param_deribed_body =
	struct DISABLE;
	using default_functor = elif<order == 0, ScalarCore<scalar>,
								elif<order == 1, VectorCore<scalar>,
									elif<order == 2, MatrixCore<scalar>, TensorCore<scalar>>>>;
	using functor = elif<MTF::isPrimitive<scalar>::conditional, default_functor, scalar>;

	template<class param_deriv>
	using pwise_ret = elif<comp_order() == 0, derived_body<param_deriv>, derived_body<derived>>;

	template<class d, class s, int o>
	auto operator +(const TensorCore<d, s, o>& tc) const {

};

#endif /* TENSORBASE_H_ */
