/*
 * BC_Correlation.h
 *
 *  Created on: Feb 25, 2018
 *      Author: joseph
 */

#ifndef BC_CORRELATION_H_
#define BC_CORRELATION_H_

#include "../BlackCat_Tensors.h"
#include <vector>

namespace BC {

namespace corr_helper {
template<> struct base<0> { template<class t, class m> using type = Scalar<t,m>;  template<class t, class m> using slice = DISABLED<t, m>; };
template<> struct base<1> { template<class t, class m> using type = Vector<t, m>; template<class t,class m> using slice = Scalar<t, m>; };
template<> struct base<2> { template<class t, class m> using type = Matrix<t, m>; template<class t,class m> using slice = Vector<t, m>; };
template<> struct base<3> { template<class t, class m> using type = Cube<t, m>;   template<class t,class m> using slice = Matrix<t, m>; };
}
using _shape = std::vector<int>;

///same
template<int movements = 2, class T, class ml, class d1, class d2>
auto x_corr(const TensorBase<d1>& krnl, const TensorBase<d2>& img, std::true_type padded = true) {
	using output_tensor = typename corr_helper::base<movements>::type<T, ml>;
	//initialize dimensionality of the tensor
	_shape dimensions(movements);
	for (int i = 0; i < movements; ++i)
		dimensions[i] = img.dimensions[i] + krnl.dimensions[i] - 1;

	//initialize the output tensor
	output_tensor tensor(dimensions);
	x_corr(tensor, krnl, img, std::true_type);
	return tensor;
}
//not same
template<int movements = 2, class T, class ml, class d1, class d2>
auto x_corr(const TensorBase<d1>& krnl, const TensorBase<d2>& img, std::false_type padded = false) {
	using output_tensor = typename corr_helper::base<movements>::type<T, ml>;
	//initialize dimensionality of the tensor
	_shape dimensions(movements);
	for (int i = 0; i < movements; ++i)
		dimensions[i] = img.dimensions[i] - krnl.dimensions[i] + 1;

	//initialize the output tensor
	output_tensor tensor(dimensions);
	x_corr(tensor, krnl, img, std::false_type);
	return tensor;

}
// -----------------------------------------------------------the actual implementation ---------------------------------------------------------------------	//
namespace corr_helper {
template<int movements = 2, class T, class ml, class d0, class d1, class d2>
void x_corr(const TensorBase<d0>& out, const TensorBase<d1>& krnl, const TensorBase<d2>& img, std::true_type padded_type = true) {
	//CODE FOR PADDED CORRELATION //
	assert(img.rank() <= movements);

}
template<int movements = 2, class T, class ml, class d0, class d1, class d2>
void x_corr(const TensorBase<d0>& out, const TensorBase<d1>& krnl, const TensorBase<d2>& img, std::false_type padded_type = false) {
	//CODE FOR NON PADDED CORRELATION//
	assert(img.rank() <= movements);

	//if movements are greater than krnl rank we "align" the output and krnl
	if (movements > krnl.rank()) {
		for (int i = 0; i < img.rank(); ++i) {
			x_corr(out[i], krnl, img[i], padded_type);
		return;
	}
	//else

		for (int i = 0; i < img.rank(); ++i) {

		}

}
}//corr_helper namespace /end
}//BC namespace /end



#endif /* BC_CORRELATION_H_ */
