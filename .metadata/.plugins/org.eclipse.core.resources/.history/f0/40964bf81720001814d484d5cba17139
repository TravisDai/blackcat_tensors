#include <iostream>
#include "../BlackCat_Tensors.h"
#include "SpeedTests.h"
using BC::Vector;
using BC::Matrix;
using BC::Scalar;
using BC::Cube;

//using ml = BC::CPU;
using ml = BC::GPU;

using vec = Vector<float, ml>;
using mat = Matrix<float, ml>;
using scal = Scalar<float, ml>;
using cube = Cube<float, ml>;

auto test() {

	mat a(3, 2);
	mat b(2 ,3);
	mat d(2, 3);
	mat e(3, 2);
	mat c(2, 2);

	std::cout << " param " << std::endl;


	a.printDimensions();

	Matrix<float> A_(3,2);
	Matrix<float> B_(2,3);
	for (int i = 0; i < 6; ++i)  {
		a(i) = i + 7;
		b(i) = i + 1;
	}

//	BC::GPU::HostToDevice(a.data().core(), A_.data().core(), A_.size());
//	BC::GPU::HostToDevice(b.data().core(), B_.data().core(), B_.size());
//	A_.print();
//	B_.print();
	a.print();
	b.print();
//
//	std::cout << std::endl;
//
	d = a.t();
	e = b.t();
	d += scal(10);
	d.print();

//	BC::GPU::copy(a.data(), b.data(), b.size());
	b.print();
	a.print();
	d.print();
	e.print();

	std::cout << " simple dot product " << std::endl;
	c = d * e;
	c.print();
	///all the permutations of optimized dotproduct
	c = a.t() * b.t();
	c = a.t() * e;
	c = d * b.t();
	c = d * scal(2) * e;
	c = scal(2) * d * e;
	c = d * e * scal(2); ////This is the only version that is not accounted for (it is also the least common notation)
	c = d * scal(2) * e;

	c.print();

	scal A(2);
	scal B(2);

	c.print();

	c = a.t() * b.t();

	A.print();

	c = a.t() * A * (b.t() * A);

	c.print();

	cube cu(2,3, 4);
	cu.zero();
	cu.print();


	std::cout << " sub vector test " << std::endl;

	d.print();
	std::cout << " adding d[1] = d[1] + d[1]" << std::endl;
	d[1] = d[1] + d[1];
	d.print();
	std::cout << " adding d[1][1] = d[1][1] + d[1][1] " << std::endl;


	d[1][1] = d[1][1] + d[1][1];
	d.print();
}


#include "../BC_Extensions/BC_Correlation.h"
int main() {

//	speedTestDelayedEval<128,     100000>();
//	speedTestDelayedEval<256,     100000>();
//	speedTestDelayedEval<512,     100000>();
//	speedTestDelayedEval<1024,    100000>();
//	speedTestDelayedEval<2048,    100000>();
//	speedTestDelayedEval<5096,    100000>();
//	speedTestDelayedEval<10000,   100000>();
//	speedTestDelayedEval<20000,   100000>();
//	speedTestDelayedEval<40000,   100000>();
//	speedTestDelayedEval<80000,   100000>();
//	speedTestDelayedEval<100000,  100000>();
//
//	speedTestsScalarIteration<128, 100000>();
//	speedTestsScalarIteration<256, 100000>();
//	speedTestsScalarIteration<512, 100000>();
//	speedTestsScalarIteration<1024, 100000>();
//	speedTestsScalarIteration<2048, 100000>();
//	speedTestsScalarIteration<5096, 100000>();
//	speedTestsScalarIteration<10000, 100000>();
//	speedTestsScalarIteration<20000, 100000>();
//	speedTestsScalarIteration<40000, 100000>();
//	speedTestsScalarIteration<80000, 100000>();
//	speedTestsScalarIteration<100000, 100000>();
////	MatrixPointwise();
	test();

	std::cout << " success  main" << std::endl;

	return 0;
}
