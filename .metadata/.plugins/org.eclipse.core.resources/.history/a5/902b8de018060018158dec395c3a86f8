/*
 * Scalar.h
 *
 *  Created on: Jan 6, 2018
 *      Author: joseph
 */

#ifndef SCALAR_H_
#define SCALAR_H_
#include "TensorBase.h"

namespace BC {

template<class T, class Mathlib>
class Scalar : public TensorBase<T, Scalar<T, Mathlib>, Mathlib>
{

	using parent_class = TensorBase<T, Scalar<T, Mathlib>, Mathlib>;
	template<class, class> friend class Vector;

public:
	static constexpr int RANK() { return 0; }

	template<class pack, class... params> Scalar(BC::shape_packet<pack> packet, const params&... param) : parent_class(packet, param...) {}


	template<class U, class V>
	Scalar(const U& u, const V& v) : parent_class(u, v) {}

	Scalar(const Scalar& v) : parent_class(v) {}
	Scalar(Scalar&& v) : parent_class(v) {}

	template<class U>
	Scalar<T, Mathlib>& operator =(const Scalar<U, Mathlib>& scalar) {
		Mathlib::set_heap(this->data(), scalar.data());
		return *this;
	}


	template<class U>
	Scalar<T, Mathlib>& operator =(U scalar) { Mathlib::set_stack(this->data(), scalar); return *this; }

	Scalar(T* param) : parent_class(param) {}
	Scalar(T value) { Mathlib::set_stack(this->array, value); }


};


}



#endif /* SCALAR_H_ */
