/*
 * TensorCore.h
 *
 *  Created on: Feb 14, 2018
 *      Author: joseph
 */

#ifndef TENSORCORE_H_
#define TENSORCORE_H_

#include "TensorCore_impl.cu"

namespace BC {

template<class derived, class Scalar_Type, class ML>
class TensorCore {
	static constexpr int order = 1;//derived::RANK();
	static constexpr bool ownership = MTF::isPrimitive<Scalar_Type>::conditional;
	using functor_type = typename TensorCore_impl<Scalar_Type, order, ML, ownership>::type;

	functor_type array;

	template<class... params>
	TensorCore(const params&... p) : array(p...) {}

	const auto& data() const { return array; }
		  auto& data() 	     { return array; }

	int rank() const { return array.rank(); }
	int size() const { return array.size();   }
	int rows() const { return array.rows(); }
	int cols() const { return array.cols(); }
	int LD_rows() const { return array.LD_rows(); }
	int LD_cols() const { return array.LD_cols(); }

	int dim(int i) const { return array.dim(i); }
	int LD_dim(int i) const { return array.LD_dim(i); }
	void printDimensions() const { array.printDimensions(); }

	template<class... integers>
	void resetShape(integers... vars) { array.resetShape(vars...); }

	TensorCore(const derived&  tensor)  : array(tensor.array) {}
	TensorCore(		 derived&& tensor)  : array(tensor.array) {}
};

}



#endif /* TENSORCORE_H_ */
