/*
 * Tensor_Core.h
 *
 *  Created on: Dec 30, 2017
 *      Author: joseph
 */

#ifndef TENSOR_CORE_H_
#define TENSOR_CORE_H_

#include "Tensor_Head.h"

namespace BC {

	/*
	 * Tensor Core is a syntactic sugar class
	 * All the ugly inheritance code goes here.
	 */

	template <class T, template<class> class IDENTITY, class derived, class lib>
	struct Tensor_Core
			: public Tensor_Head<
			  derived,
			  TRAITS<
			  	  typename MTF::determine_scalar<T>::type,
			  	  IDENTITY<derived>,
			  	  typename MTF::determine_functor<T>::type,
			  	  typename MTF::determine_evaluation<IDENTITY<derived>>::type, lib>> {


			using parent_class = Tensor_Head<
					  derived,
					  TRAITS<
					  	  typename MTF::determine_scalar<T>::type,
					  	  IDENTITY<derived>,
					  	  typename MTF::determine_functor<T>::type,
					  	  typename MTF::determine_evaluation<IDENTITY<derived>>::type, lib>>;

			using parent_class::operator=;
			using functor_type = typename parent_class::functor_type;

			functor_type array;
			template<class... params> Tensor_Core(const params&... p) : array(p...) {}

			template<class pDeriv, class pTraits>
			derived& operator =(const Tensor_Core<pDeriv, pTraits>& tensor) {
				math_library::copy(this->data(), tensor.data());
				return * this;
			}
			derived& operator =(const Tensor_Core<derived, TRAITS>& tensor) {
				math_library::copy(this->data(), tensor.data());
				return * this;
			}
			derived& operator =(Tensor_Core<derived, TRAITS>&& tensor) {
					functor_type swapper = this->array;
					this->array = tensor.array;
					tensor.array = swapper;

					return * this;
				}

	};

}



#endif /* TENSOR_CORE_H_ */
