
#include "Tensor.h"
#include "FeedForward.h"
#include "NeuralNetwork.h"
#include "ConvolutionalLayer.h"
#include <fstream>

typedef std::vector<vec> data;

tensor expandOutput(int val, int total) {
	tensor out(total);
	out.fill(0);
	out[val] = 1;
	return out;
}

tensor normalize(tensor tens, double max, double min) {
		tens -= min;
		tens /= (max - min);

	return tens;
}

void generateAndLoad(data& input_data, data& output_data, std::ifstream& read_data, unsigned MAXVALS) {
	unsigned numb = 0;
	unsigned vals = 0;
	while (read_data.good() && vals < MAXVALS) {
		tensor input;
		input.readCSV(read_data, 785);
		auto v = normalize(input({1}, {784}), 255, 0);
		input_data.push_back(v);
		output_data.push_back(expandOutput(input(0).get(), 10));
		++vals;
	}
	std::cout << " return -- finished creating data set "<< std::endl;
}

//  Alternate test class Network structure
//	ConvolutionalLayer f1(28, 28, 1, 3, 3, 12);
//	ConvolutionalLayer f2(26, 26, 12, 3, 3, 8);
//	FeedForward f3(4608, 10);
//	net.add(&f1);
//	net.add(&f2);
//	net.add(&f3);


int ConvMNIST() {

	//Create neural network object
	NeuralNetwork net;

	//Create layers
	ConvolutionalLayer f1(28, 28, 1, 3, 3, 10);
	FeedForward f2(6760, 10);
	net.add(&f1);
	net.add(&f2);

	net.setLearningRate(.1);

	//initialize data storage
	data inputs(0);
	data outputs(0);

	data testInputs(0);
	data testOutputs(0);

	//load data
	std::cout << "loading data..." << std::endl << std::endl;
	std::ifstream in_stream("///home/joseph///Downloads///train.csv");

	//Load 40,000 training examples (taken from kaggle digit recognizer train.csv)
	generateAndLoad(inputs, outputs, in_stream, 40000);
	//Load 1000 training exampels to be used as a test set
	generateAndLoad(testInputs, testOutputs, in_stream, 1000);

	std::cout << "testing initial error..." << std::endl << std::endl;
	double test_error = 0;
	test_error = net.test(testInputs, testOutputs);
	std::cout << " test error post training -- " << test_error << std::endl << std::endl;

	//train neural network
	unsigned NUMB_ITERATIONS = 20;
	std::cout << "training... --- numb epochs = " << NUMB_ITERATIONS << std::endl;
	//update test accuracy print-ot every 100 elements -- (the method train(const data&, const data&) trains the data without print outs)
	net.realTimeTrain(inputs, outputs, NUMB_ITERATIONS, 1);

	//Test the error again
	std::cout << "testing..." << std::endl << std::endl;
	std::cout << "Test error ----" << std::endl << std::endl;
	test_error = 0;
	test_error = net.test(testInputs, testOutputs);


	std::cout << std::endl << "Train error ----" << std::endl;

	test_error = net.test(inputs, outputs);

	std::cout << " test error post training -- " << test_error << std::endl;

	return 0;
}
int FFMNIST() {
//Test class for me developing the GPU variant
		Tensor<double> t;

		//Create neural network object
		std::cout << " make net " <<std::endl;
		NeuralNetwork net;

		std::cout << " Set lr " << std::endl;
		net.setLearningRate(.3);
		//Create layers

		std::cout << " make layers " << std::endl;
		FeedForward f1(784, 200);
		FeedForward f2(200, 10);
		std::cout << " add layer " << std::endl;
		net.add(&f1);
		net.add(&f2);

	//	ConvolutionalLayer f1(28, 28, 1, 3, 3, 20);
	//	FeedForward f3(13520, 10);
	//	net.add(&f1);
	//	net.add(&f3);

		//initialize data storage
		data inputs(0);
		data outputs(0);

		data testInputs(0);
		data testOutputs(0);

		//load data
		std::cout << "loading data..." << std::endl << std::endl;
		std::ifstream is("///home/joseph///Downloads///train.csv");
		//Load 40,000 training examples (taken from kaggle digit recognizer train.csv)
		generateAndLoad(inputs, outputs, is,40000);
		//Load 1000 training exampels to be used as a test set
		generateAndLoad(testInputs, testOutputs, is, 100);
//
		std::cout << "testing initial error..." << std::endl << std::endl;
		double test_error = 0;
		//test_error =
		net.testFlat(testInputs, testOutputs);
		std::cout << " test error post training -- " << test_error << std::endl << std::endl;

		//train neural network
		unsigned NUMB_ITERATIONS = 1;
		std::cout << "training... ~2minutes --- numb epochs = " << NUMB_ITERATIONS << std::endl;
		//net.train(inputs, outputs, NUMB_ITERATIONS);


		//net.testFlat(inputs, outputs);
		net.train(inputs, outputs, NUMB_ITERATIONS);


		//Test the error again
		std::cout << "testing..." << std::endl << std::endl;
		std::cout << "Test error ----" << std::endl << std::endl;
		test_error = 0;
		//test_error =
		net.testFlat(testInputs, testOutputs);


		std::cout << std::endl << "Train error ----" << std::endl;

		test_error = net.test(inputs, outputs);

		std::cout << " test error post training -- " << test_error << std::endl;

		return 0;
	}


int main() {
	ConvMNIST();
	//FFMNIST();
}
