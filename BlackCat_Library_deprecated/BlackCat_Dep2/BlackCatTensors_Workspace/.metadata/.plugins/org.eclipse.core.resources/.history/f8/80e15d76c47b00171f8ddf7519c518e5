#include "Tensor.h"
#include <iostream>

using namespace std;
#include <vector>

Tensor<double> test_tensor(std::initializer_list<unsigned> dim) {

    auto a = Tensor<double>({dim});


    for (int i = 0; i < a.size(); ++i) {

        a(i) = i + 1;
    }
    return a;
}

void Constructor_Tests() {
    auto a = test_tensor({1, 2, 3});
    a = test_tensor({1, 2, 3});
    a[0].print();
    a[0].fill(2);
    a.print();
    a[0][0] = 1;
    a.print();

    Tensor<double> b = Tensor<double>(1, 2, 3);
    b.print();
    //b.reset();
    b.print();
}

void movementTests() {
    Tensor<double> a = {3, 4};

    std::cout << " a tensor " << std::endl;
    a.print();
    std::cout << " b tensor " << std::endl;
    auto b = test_tensor({3, 4});
    b.print();
    std::cout << " share a and b " << std::endl;

    Tensor<double>::share(a, b);
    std::cout << " a tensor " << std::endl;
    a.print();

    std::cout << " b tensor reshaed (2,2,3) " << std::endl;
    Tensor<double>::reshape(b,{2, 2, 3}).print();


    std::cout << " b reshaped (as reference 12)" << std::endl;
    b.reshape({12});
    b.print();

    //    std::cout << " c Tensor (3,4) -reshape share" << std::endl;
    //    Tensor<double> c = {3, 4};
    //    Tensor<double>::reshape_share(c, b);
    //    c.print();
    //    std::cout << " d reshape_move" << std::endl;
    //    Tensor<double> d = {4, 3};
    //
    //    //	Tensor<double>::reshape_move(d, b);
    //    d.print();
    //    b.print();
}

void p(Tensor<double>& a, Tensor<double>& b) {
    (a * b).print();
}

void pt(Tensor<double>& a, Tensor<double>& b) {
    // (a.T() * b).print();
}
//void p(Tensor<double>& a, double& d);

void e(Tensor<double>& a, Tensor<double>& b) {
    (a ^ b).print();
}

void m(Tensor<double>& a, Tensor<double>& b) {
    (a & b).print();
}

void d(Tensor<double>& a, Tensor<double>& b) {
    (a / b).print();
}

void a(Tensor<double>& a, Tensor<double>& b) {
    (a + b).print();
}

void s(Tensor<double>& a, Tensor<double>& b) {
    (a - b).print();
}

//matrix by scalar tests

void e(Tensor<double>& a, double& d) {
    (a ^ d).print();
}

void m(Tensor<double>& a, double& d) {
    (a & d).print();
}

void d(Tensor<double>& a, double& d) {
    (a / d).print();
}

void a(Tensor<double>& a, double& d) {
    (a + d).print();
}

void s(Tensor<double>& a, double& d) {
    (a - d).print();
}

void GeneralTests() {
    Tensor<double> alpha = Tensor<double>(4, 4);
    Tensor<double> beta = Tensor<double>(4, 4);
    for (int i = 0; i < alpha.size(); ++i) {
        alpha(i) = i;
    }
    for (int i = 0; i < beta.size(); ++i) {
        beta(i) = i;
    }



    p(alpha, beta);
    e(alpha, beta);
    m(alpha, beta);
    d(alpha, beta);
    a(alpha, beta);
    s(alpha, beta);


    double vbeta = 2;

    e(alpha, vbeta);
    m(alpha, vbeta);
    d(alpha, vbeta);
    a(alpha, vbeta);
    s(alpha, vbeta);

}
//#include "cblas.h"
//#include "cblas_f77.h"

void dot_products() {
    auto a = test_tensor({2, 3});
    auto b = test_tensor({3, 2});


    std::cout << " a tensor " << std::endl;
    a.print();
    std::cout << " b tensor " << std::endl;
    b += 6;

    b.print();
    std::cout << " a*b tensor " << std::endl;

    (a * b).print();


    //b.transpose().print();
    std::cout << "transpose test" << std::endl;
    auto c = test_tensor({2, 3});
   // a.transpose().print();



    c(0) = 7; c(1) = 10; c(2) = 8;
    c(3) = 11; c(4) = 9; c(5) =12;


    std::cout << " c tensor " << std::endl;

    std::cout << " a->*c tensor " << std::endl;
    //a.print();
    //c.transpose().print();
    //(a *c.transpose()).print();
    //a.T();
//    (a*c.T());//.print(); //.print();

}

int main(int argc, char** argv) {

    std::cout << "%SUITE_STARTING% Method_Tests" << std::endl;
    std::cout << "%SUITE_STARTED%" << std::endl;

    std::cout << "%TEST_STARTED% " << std::endl;

    std::cout << "constructor tests" << std::endl;
    Constructor_Tests();
    std::cout << "movement tests" << std::endl;
    movementTests();
    std::cout << "operator tests" << std::endl;
    GeneralTests();
    std::cout << "dotproduct tests" << std::endl;
    dot_products();

    std::cout << "%TEST_FINISHED% time=0 test1 (Method_Tests)" << std::endl;


    std::cout << "%SUITE_FINISHED% time=0" << std::endl;

    return (EXIT_SUCCESS);
}
