

#include "Tensor.h"

namespace nonLin {

void sigmoid(Tensor<double,CPU>& x) {
	for (int i = 0; i < x.size(); ++i) {
		x.data()[i] = 1 / (1 + pow(2.71828, -x.data()[i]));
	}
}

void sigmoid_deriv(Tensor<double,CPU>& x) {
	for (int i = 0; i < x.size(); ++i) {
		x.data()[i] *=  (1 - x.data()[i]);
	}
}




__global__
void sig_deriv(float* data, unsigned sz) {
	for (int i = 0; i < sz; ++i) {
		data[i] *=  (1 - data[i]);
	}
}



__global__  void sig(float* x, unsigned sz) {
	for (int i = 0; i < sz; ++i) {
		x[i] = 1 / (1 + pow(2.71828, -x[i]));
	}
}

void sigmoid(Tensor<float,GPU>& x) {
	sig<<<6, 128>>>(x.data(), x.size());
	cudaDeviceSynchronize();
}

void sigmoid_deriv(Tensor<float,GPU>& x) {
	sig_deriv<<<6, 128>>>(x.data(), x.size());
	cudaDeviceSynchronize();
}


}
