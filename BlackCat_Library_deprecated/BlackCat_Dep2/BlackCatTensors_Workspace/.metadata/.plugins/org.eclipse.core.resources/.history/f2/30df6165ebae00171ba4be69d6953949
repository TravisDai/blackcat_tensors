class CPU {

	//buffer buffer tensor
	//tensor bugger
	//buffer tensor


	template<typename T, typename lv, typename rv>
	class Pointwise_Operation_Buffer {
		Pointwise_Operation_Buffer* next_oper;

		virtual T operator[] (unsigned index) {
			return tensor_1[index] + tensor_2[index];
		}

		lv* tensor_1;
		rv* tensor_2;
		unsigned sz;

		//lv is always a number type
		void calculate(T* assign_to) {
			for (unsigned i = 0; i < sz; ++i) {
				assign_to[i] = tensor_1[i] + tensor_2[i];
			}
		}

		void eval(T* assign_to, unsigned index);
	};

	template<typename T>
	class mul : Pointwise_Operation_Buffer<T> {
	};
	template<typename T>
	class div : Pointwise_Operation_Buffer<T> {
	};
	template<typename T>
	class add : Pointwise_Operation_Buffer<T> {
	};
	template<typename T>
	class sub : Pointwise_Operation_Buffer<T> {
	};
	template<typename T>
	class dot : Pointwise_Operation_Buffer<T> {
	};

	template<typename T>
	class mul_scal : Pointwise_Operation_Buffer<T> {
	};
	template<typename T>
	class div_scal : Pointwise_Operation_Buffer<T> {
	};
	template<typename T>
	class add_scal : Pointwise_Operation_Buffer<T> {
	};
	template<typename T>
	class sub_scal : Pointwise_Operation_Buffer<T> {
	};
};
