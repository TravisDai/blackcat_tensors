/*
 * BC_Tensor_Super_King.h
 *
 *  Created on: Nov 20, 2017
 *      Author: joseph
 */

#ifndef BC_TENSOR_SUPER_KING_H_
#define BC_TENSOR_SUPER_KING_H_

#include "BC_Expression__Binary.h"
//#include "BC_Tensor_Super_Identity_impl.h"
#include "BC_Tensor_Super_Shape.h"
#include "BC_Tensor_Super_Ace.h"

template<class T, class Math_library, int... dims>
class Tensor_King : Tensor_Ace<T, binary_expression, dims...> {

	//Intermediate class for non-expression Tensors -- defines standard methods

	template<class right_value>
	binary_expression<BC::add, functor_type, typename right_value::functor_type, dimensions...> operator + (const right_value& rv) {
		return binary_expression<BC::add, functor_type, typename right_value::functor_type, dimensions...>(this->data(), rv.data());
	}

	template<class right_value>
	binary_expression<BC::sub, functor_type, typename right_value::functor_type, dimensions...> operator - (const right_value& rv) {
		return binary_expression<BC::sub, functor_type, typename right_value::functor_type, dimensions...>(this->data(), rv.data());
	}

	template<class right_value>
	binary_expression<BC::div, functor_type, typename right_value::functor_type, dimensions...> operator / (const right_value& rv) {
		return binary_expression<BC::div, functor_type, typename right_value::functor_type, dimensions...>(this->data(), rv.data());
	}

	template<class right_value>
	binary_expression<BC::mul, functor_type, typename right_value::functor_type, dimensions...> operator % (const right_value& rv) {
		return binary_expression<BC::mul, functor_type, typename right_value::functor_type, dimensions...>(this->data(), rv.data());
	}



};


#endif /* BC_TENSOR_SUPER_KING_H_ */
