/*
 * BC_Tensor_Super_King.h
 *
 *  Created on: Nov 20, 2017
 *      Author: joseph
 */

#ifndef BC_TENSOR_SUPER_KING_H_
#define BC_TENSOR_SUPER_KING_H_

#include "BC_Expression.h"
#include "BC_Tensor_Super_Identity_impl.h"
#include "BC_Tensor_Super_Shape.h"
#include "BC_Tensor_Super_Ace.h"

template<class T, class ml, int... dims>
class Tensor_King : Tensor_Ace<dims...> {

	T* tensor;

	Tensor_King() {
		ml::initialize(tensor, this->size());
	}

	template<typename U>
	binary_expression<BC::add, T*, U*, dims...> operator + (const Tensor_King<U, ml, dims...>& t) {
		binary_expression<BC::add, T*, U*, dims...>(this->tensor, t.tensor);
	}

	template<typename U>
	binary_expression<BC::sub, T*, U*, dims...> operator - (const Tensor_King<U, ml, dims...>& t) {
		binary_expression<BC::sub, T*, U*, dims...>(this->tensor, t.tensor);
	}

	template<typename U>
	binary_expression<BC::div, T*, U*, dims...> operator / (const Tensor_King<U, ml, dims...>& t) {
		binary_expression<BC::div, T*, U*, dims...>(this->tensor, t.tensor);
	}

	template<typename U>
	binary_expression<BC::mul, T*, U*, dims...> operator % (const Tensor_King<U, ml, dims...>& t) {
		binary_expression<BC::mul, T*, U*, dims...>(this->tensor, t.tensor);
	}

};


#endif /* BC_TENSOR_SUPER_KING_H_ */
