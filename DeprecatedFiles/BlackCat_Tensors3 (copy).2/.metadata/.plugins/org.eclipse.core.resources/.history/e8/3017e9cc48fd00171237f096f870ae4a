/*
 * Matrix.h
 *
 *  Created on: Dec 30, 2017
 *      Author: joseph
 */

#ifndef BC_MATRIX_H
#define BC_MATRIX_H
#include "../BlackCat_Internal_GlobalUnifier.h"
#include "Scalar.h"
#include "Tensor_Base.h"


namespace BC {
template<class T, class Mathlib, class shape>
class Matrix : public Tensor_Base<T, Matrix<T, Mathlib, shape>, Mathlib, shape>
{
	using parent_class = Tensor_Base<T, Matrix<T, Mathlib, shape>, Mathlib, shape>;
	using _int = typename parent_class::subAccess_int;
	using __int = typename parent_class::force_evaluation_int;
	template<class,class, class>
	friend class Vector;

public:
	using parent_class::operator=;
	using parent_class::parent_class;

	Matrix(int rows, int cols = 1) : parent_class({rows, cols}) {} Vector(Vector<T, Mathlib, shape>&& vec) : parent_class(vec.expression_packet(), vec.data()) {}

	template<class U, class child> Vector(const Vector<U, Mathlib, child>& vec) : parent_class(vec.expression_packet()) { Mathlib::copy(this->data(), vec.data(), this->size()); }
	template<class child> Vector(const Vector<T, Mathlib, child>& vec) : parent_class(vec.expression_packet()) { Mathlib::copy(this->data(), vec.data(), this->size()); }


	Scalar<T, Mathlib, typename shape::ACCESSOR_SHAPE> operator[] (_int i) {
		return (Scalar<T, Mathlib, typename shape::ACCESSOR_SHAPE>(&this->array[i]));
	}
	const Scalar<T, Mathlib, typename shape::ACCESSOR_SHAPE> operator[] (_int i) const {
		return Scalar<T, Mathlib, typename shape::ACCESSOR_SHAPE>(&this->array[i]);
	}

	auto operator [] (__int i) const {
		return this->data()[i];
	}

	Vector<T, Mathlib, shape>& operator = (const Vector<T, Mathlib, shape>& vec) {
		this->assert_same_size(vec);
		Mathlib::copy(this->data(), vec.data(), this->size());
		return this->asBase();
	}
	template<class U, class S>
	Vector<T, Mathlib, shape>& operator = (const Vector<U, Mathlib, S>& vec) {
		this->assert_same_size(vec);
		Mathlib::copy(this->data(), vec.data(), this->size());
		return this->asBase();
	}

};

} //End Namespace BC

#endif /* VECTOR_H_ */
