#ifndef BC_GPU_IMPL
#define BC_GPU_IMPL

#include <cuda_runtime_api.h>
#include <cuda.h>
#include <curand.h>
#include <curand_kernel.h>
#include <limits>
namespace BC {
namespace gpu_impl {

template<typename T, typename J> __global__
static void fill(T t, const J j, int sz) {
	for (int i = 0; i < sz; ++i) {
		t[i] = j;
	}
}

template<typename T, typename J> __global__
static void set_heap(T *t, J *j) {
	&t = &j;
}

template<typename T> __global__
static void scalarONE(T *t) {
	*t = 1;
}
template<typename T, typename J> __global__
static void set_stack(T *t, J j) {
	*t = j;
}

template<typename T, typename J> __global__
static void fill(T* t, const J* j, int sz) {
	for (int i = 0; i < sz; ++i) {
		t[i] = j[i];
	}
}
template<typename T, typename J> __global__
static void eval(T* t, const J* j, int sz) {
	for (int i = 0; i < sz; ++i) {
		t[i];
	}
}

template<typename T> __global__
static void zero(T& t, int sz) {
	for (int i = 0; i < sz; ++i) {
		t[i] = 0;
	}
}

template<class T, class J> __global__
static void copy(T t, J j, int sz) {
	for (int i = 0; i < sz; ++i) {
		t[i] = j[i];
	}
}

template<typename T, typename J> __global__
static void randomize(T t, J lower_bound, J upper_bound, int sz, int seed) {

	 curandState_t state;
	  curand_init(seed, /* the seed controls the sequence of random values that are produced */
	              seed, /* the sequence number is only important with multiple cores */
	              1, /* the offset is how much extra we advance in the sequence for each call, can be 0 */
	              &state);


	for (int i = 0; i < sz; ++i) {
		t[i] = ((curand(&state) / std::max(lower_bound)) - lower_bound)) / (upper_bound - lower_bound);
//		t[i] += (curand(&state) % (int)(upper_bound + lower_bound) - lower_bound) / 10;
//		t[i] += (curand(&state) % (int)(upper_bound + lower_bound) - lower_bound) / 100;


	}
}
template<class> struct max;
template<class T> constexpr T value;
template<> constexpr bool	true
template<> constexpr char	CHAR_MAX
template<> constexpr signed char	SCHAR_MAX
template<> constexpr unsigned char	UCHAR_MAX
template<> constexpr wchar_t	WCHAR_MAX
template<> constexpr char16_t	UINT_LEAST16_MAX
template<> constexpr char32_t	UINT_LEAST32_MAX
template<> constexpr short	SHRT_MAX
template<> constexpr unsigned short	USHRT_MAX
template<> constexpr int	INT_MAX
template<> constexpr unsigned int	UINT_MAX
template<> constexpr long	LONG_MAX
template<> constexpr unsigned long	ULONG_MAX
template<> constexpr long long	LLONG_MAX
template<> constexpr unsigned long long	ULLONG_MAX
template<> constexpr float	FLT_MAX
template<> constexpr double	DBL_MAX
template<> constexpr long double	LDBL_MAX

}
}

#endif
